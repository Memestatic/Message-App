@{
    ViewData["Title"] = "Chats";
}

@using Microsoft.AspNetCore.Components.Web
@model IEnumerable<FriendWithLastMessageViewModel>

<div class="container">
    <div class="row">
        <!-- Friends List Column -->
        <div class="col-md-4">
            <h2>Friends List</h2>
            <div id="friends-list">
                @foreach (var friend in Model)
                {
                    <div class="card mb-2 open-chat @(friend.UnreadCount > 0 ? "unread" : "")" data-friend-id="@friend.Id" style="cursor: pointer;">
                        <div class="card-body d-flex align-items-center">
                            <img src="@(!string.IsNullOrEmpty(friend.AvatarUrl) ? friend.AvatarUrl : "https://img.freepik.com/free-vector/smiling-young-man-illustration_1308-174669.jpg")"
                                 alt="avatar" class="friend-avatar" />
                            <div class="ms-2">
                                <h5 class="card-title">
                                    @friend.FirstName @friend.LastName
                                    @if (friend.UnreadCount > 0)
                                    {
                                        <span class="badge bg-danger">@friend.UnreadCount</span>
                                    }
                                </h5>
                                @if (!String.IsNullOrEmpty(friend.LastMessageContent))
                                {
                                    <div class="last-message text-muted small @(friend.UnreadCount > 0 ? "fw-bold" : "")">
                                        <strong>@friend.LastMessageSenderName:</strong> @friend.LastMessageContent
                                    </div>
                                    @if (friend.LastMessageDate != null)
                                    {
                                        <div class="last-message-date text-muted small">
                                            @friend.LastMessageDate.Value.ToString("g")
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>

                }
            </div>
        </div>

        <!-- Chat Conversation Column -->
        <div class="col-md-8">
            <h2>Chat Conversation</h2>
            <div id="chat-container" class="border rounded p-2" style="max-height: 600px; overflow-y: auto;">
                <!-- Chat messages will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.open-chat').click(function () {
                var friendId = $(this).data('friend-id');
                $.ajax({
                    url: '@Url.Action("ChatWindow", "Chat")',
                    data: { friendId: friendId },
                    type: 'GET',
                    success: function (result) {
                        $('#chat-container').html(result);

                        setTimeout(function() {
                            var $chat = $('.chat-messages');
                            console.log($chat);
                            $chat.scrollTop($chat[0].scrollHeight);
                        }, 100);

                        // Initialization of character counter after loading chat
                        $('#message').on('input', function () {
                            var maxLength = parseInt($(this).attr('maxlength'));
                            var remaining = maxLength - $(this).val().length;
                            var $charCount = $('#charCount');

                            $('#charCount').text(remaining);

                            $charCount.text(remaining + " characters left");

                            if (remaining === 0){
                                $charCount.css({
                                    "color": "red",
									"font-weight": "bold"
                                });
                            } else{
                                $charCount.css({
                                "color": "",
                                "font-weight": ""
                            });
                            }
                        });
                    },
                    error: function () {
                        alert('Error loading chat conversation.');
                    }
                });
            });
        });
    </script>

    <script>
        // Make sure we have access to the current user's ID
        var currentUserId = '@ViewBag.CurrentUserId';

        // Create a connection to the SignalR hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // ReceiveMessage event handling – chat window update (if open)
        connection.on("ReceiveMessage", function(senderId, receiverId, senderName, message) {
            let chatWindows = document.querySelectorAll(`.chat-window[data-friend-id="${senderId}"], .chat-window[data-friend-id="${receiverId}"]`);
            chatWindows.forEach(chatWindow => {
                let chatMessages = chatWindow.querySelector(".chat-messages");
                if (chatMessages) {
                    let p = document.createElement("p");
                    p.innerHTML = `<strong>${senderId === currentUserId ? "Me" : senderName}:</strong> ${message}`;
                    chatMessages.appendChild(p);
                    // Automatic scroll to the bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            });
        });

        // Handling the UpdateFriendList event – updating the friends list
        connection.on("UpdateFriendList", function(conversationPartnerId, messageContent, timestamp, senderId, senderName) {
            var displayName = (senderId === currentUserId) ? "You" : senderName;
            // Fild friend's card
            var friendCard = document.querySelector(`.open-chat[data-friend-id='${conversationPartnerId}']`);
            if (friendCard) {
                // Find or create a recent message item
                var lastMessageElem = friendCard.querySelector('.last-message');
                if (!lastMessageElem) {
                    lastMessageElem = document.createElement("div");
                    lastMessageElem.classList.add("last-message", "text-muted", "small");
                    friendCard.querySelector(".card-body .ms-2").appendChild(lastMessageElem);
                }
                lastMessageElem.innerHTML = `<strong>${displayName}:</strong> ${messageContent}`;

                // Last message date's update
                var lastMessageDateElem = friendCard.querySelector('.last-message-date');
                if (!lastMessageDateElem) {
                    lastMessageDateElem = document.createElement("div");
                    lastMessageDateElem.classList.add("last-message-date", "text-muted", "small");
                    friendCard.querySelector(".card-body .ms-2").appendChild(lastMessageDateElem);
                }
                var date = new Date(timestamp);
                lastMessageDateElem.textContent = date.toLocaleString();

                // Badge update – only if the current user is the recipient
                if (senderId !== currentUserId) {
                    let badge = friendCard.querySelector(".badge");
                    if (badge) {
                        let count = parseInt(badge.textContent) || 0;
                        badge.textContent = count + 1;
                    } else {
                        // If there is no badge, create one and insert it next to the title
                        badge = document.createElement("span");
                        badge.classList.add("badge", "bg-danger");
                        badge.textContent = "1";
                        let cardTitle = friendCard.querySelector(".card-title");
                        if (cardTitle) {
                            cardTitle.appendChild(badge);
                        }
                    }
                    // Add the 'unread' class to the tab and bold the last message
                    friendCard.classList.add("unread");
                    let lastMessage = friendCard.querySelector(".last-message");
                    if (lastMessage) {
                        lastMessage.classList.add("fw-bold");
                    }
                }
            }
        });

        // Connection start
        connection.start().catch(function(err) {
            return console.error(err.toString());
        });
    </script>


    <script>
        console.log("Script loaded")
        // Event delegation to handle dynamically loaded partial view content.
        $(document).on('click', '#sendMessageButton', function () {
            var chatWindow = $(this).closest('.chat-window');
            var friendId = chatWindow.data('friend-id');
            var messageContent = chatWindow.find('#message').val();
            var fileInput = chatWindow.find('#attachment')[0];
            
            var formData = new FormData();
            formData.append("friendId", friendId);
            formData.append("messageContent", messageContent);
            if(fileInput && fileInput.files.length > 0) {
                formData.append("attachment", fileInput.files[0]);
            }
            
            console.log("Send button clicked", friendId, messageContent);
            $.ajax({
                url: '@Url.Action("SendMessage", "Chat")',
                type: 'POST',
                data: formData,
                processData: false,    // ważne przy przesyłaniu FormData
                contentType: false,    // nie ustawiamy nagłówka Content-Type, aby przeglądarka ustawiła go poprawnie
                success: function (result) {
                    if(result.success) {
                        // Używamy chatWindow już pobranego wcześniej
                        var chatMessages = chatWindow.find('.chat-messages');
                        var messageHtml = `<p><strong>Me:</strong> ${messageContent}</p>`;
                        if(result.attachmentUrl) {
                            messageHtml += `<img src="${result.attachmentUrl}" alt="Attachment" style="max-width:200px; max-height:200px; display:block; margin-top:5px;" />`;
                        }
                        chatMessages.append(messageHtml);
                        chatMessages.scrollTop(chatMessages.prop("scrollHeight"));
                        chatWindow.find('#message').val('');
                        chatWindow.find('#attachment').val('');
                    }
                },

                error: function () {
                    alert('Error sending message.');
                }
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".friend-avatar").forEach(img => {
                const defaultAvatar = "avatars/default.jpg";
                const testImg = new Image();
                testImg.src = img.src;

                testImg.onerror = function () {
                    img.src = defaultAvatar;
                };
            });
        });

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".open-chat").forEach(chatItem => {
                chatItem.addEventListener("click", function () {
                    const chatId = this.dataset.friendId;

                    // Remove 'unread' class and bold when chat is opened
                    this.classList.remove("unread");
                    const lastMessage = this.querySelector(".last-message");
                    if (lastMessage) {
                        lastMessage.classList.remove("fw-bold");
                    }

                    // Hide message count badge
                    const badge = this.querySelector(".badge");
                    if (badge) {
                        badge.remove();
                    }

                    // We send a request to the backend to mark messages as read
                    fetch(`/Chat/MarkAsRead?friendId=${chatId}`, {
                        method: "POST"
                    }).catch(error => console.error("Błąd oznaczania jako przeczytane:", error));
                });
            });
        });


    </script>
}
